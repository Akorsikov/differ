#!/usr/bin/env php
<?php

$autoloadPathGlobal = __DIR__ . '/../../../autoload.php';
$autoloadPathLocal = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoloadPathGlobal)) {
    require_once $autoloadPathGlobal;
} else {
    require_once $autoloadPathLocal;
}

$doc = <<<DOC

Generate diff

Usage:
  gendiff (-h|--help)
  gendiff (-v|--version)
  gendiff [--format <frm>] (<firstFile> <secondFile>)

Options:
  -h --help                 Show this screen
  -v --version              Show version
  --format <frm>            Report format [default: stylish]
DOC;

$args = Docopt::handle($doc, array('version' => 'gendiff 0.1'));
$nameFirstFile = $args['<firstFile>'];
$nameSecondFile = $args['<secondFile>'];

if (!is_readable($nameFirstFile) or !is_readable($nameSecondFile)) {
  exit('The file(s) do not exist or are unreadable');
}
$diff = genDiff($nameFirstFile, $nameSecondFile);

echo($diff);

/**
 * Function genDiff is constructed based on how the files have changed
 * relative to each other, the keys are output in alphabetical order.
 * 
 * @param string $pathFirst  path to first file
 * @param string $pathSecond path to second file
 * 
 * @return string file differences in relation to each other
 */
function genDiff(string $pathFirst, string $pathSecond): string
{
  $firstFileContents = getFileContents($pathFirst);
  $secondFileContents = getFileContents($pathSecond);
  $result = '';

  $firstFileKeys = array_keys($firstFileContents);
  $secondFileKeys = array_keys($secondFileContents);
  $listAllKeys = array_unique(array_merge($firstFileKeys, $secondFileKeys));
  sort($listAllKeys, SORT_STRING);

  foreach ($listAllKeys as $key) {

    $firstFileKeyExists = array_key_exists($key, $firstFileContents);
    $secondFileKeyExists = array_key_exists($key, $secondFileContents);

    if ($firstFileKeyExists and is_bool($firstFileContents[$key])) {
      $firstFileContents[$key] = var_export($firstFileContents[$key], true);
    }

    if ($secondFileKeyExists and is_bool($secondFileContents[$key])) {
      $secondFileContents[$key] = var_export($secondFileContents[$key], true);
    }

    switch (true) {
      case $firstFileKeyExists and $secondFileKeyExists:
        if ($firstFileContents[$key] === $secondFileContents[$key]) {
          $result .= "    {$key}: {$firstFileContents[$key]}\n";
        } else {
          $result .= "  - {$key}: {$firstFileContents[$key]}\n";
          $result .= "  + {$key}: {$secondFileContents[$key]}\n";
        }
        break;
      case $firstFileKeyExists and !$secondFileKeyExists:
        $result .= "  - {$key}: {$firstFileContents[$key]}\n";
        break;
      case !$firstFileKeyExists and $secondFileKeyExists:
        $result .= "  + {$key}: {$secondFileContents[$key]}\n";
        break;
      default: exit('Error: Key is not exists!');
    }
  }
  return "{\n{$result}}\n";
}

/**
 * Function receives the JSON-file content and decodes it into an associative array
 * 
 * @param string $path path to JSON-file
 * 
 * @return array associative array
 */
function getFileContents(string $path): array
{
  return json_decode(file_get_contents($path), true);
}
